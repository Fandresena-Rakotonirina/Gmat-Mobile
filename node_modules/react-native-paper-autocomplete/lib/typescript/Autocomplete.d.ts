import * as React from 'react';
import { TextInputProps, ViewStyle, FlatListProps } from 'react-native';
import { TextInput } from 'react-native-paper';
import type { IconSource } from './icon';
declare type PaperInputProps = React.ComponentProps<typeof TextInput>;
export declare function getFlatListItemLayout(_: any[] | undefined | null, index: number): {
    length: number;
    offset: number;
    index: number;
};
export interface FilterOptionsParams<ItemT> {
    isFocusedAndValueIsSameAsSearch: boolean;
    inputValue: string;
    getOptionLabel: (option: ItemT) => string;
    getOptionDescription?: (option: ItemT) => string;
}
export interface AutocompleteBaseProps<ItemT> {
    testID?: string;
    loading?: boolean;
    listProps?: Omit<FlatListProps<ItemT>, 'data' | 'renderItem' | 'ref' | 'keyExtractor' | 'extraData'>;
    inputProps?: PaperInputProps;
    ListComponent?: any;
    options: ReadonlyArray<ItemT> | null | undefined;
    groupBy?: (option: ItemT) => string;
    renderInput?: (params: TextInputProps) => any;
    style?: ViewStyle;
    disableInputPrefixIcon?: boolean;
    getOptionLabel?: (option: ItemT) => string;
    getOptionDescription?: (option: ItemT) => string | number;
    getOptionValue?: (option: ItemT) => string | number;
    getOptionIcon?: (option: ItemT) => IconSource;
    filterOptions?: (a: ReadonlyArray<ItemT> | null | undefined, { isFocusedAndValueIsSameAsSearch, inputValue, getOptionLabel, getOptionDescription, }: FilterOptionsParams<ItemT>) => ReadonlyArray<ItemT> | null | undefined;
}
export interface AutocompleteMultipleProps<ItemT> extends AutocompleteBaseProps<ItemT> {
    multiple: true;
    value: ItemT[] | null | undefined;
    onChange: (v: ItemT[]) => void;
}
export interface AutocompleteSingleProps<ItemT> extends AutocompleteBaseProps<ItemT> {
    multiple?: undefined | false;
    value: ItemT | null | undefined;
    onChange: (v: ItemT | undefined) => void;
}
export declare function defaultFilterOptions<ItemT>(a: ReadonlyArray<ItemT> | null | undefined, { isFocusedAndValueIsSameAsSearch, inputValue, getOptionLabel, getOptionDescription, }: FilterOptionsParams<ItemT>): readonly ItemT[] | null | undefined;
export default function Autocomplete<ItemT>(props: AutocompleteMultipleProps<ItemT> | AutocompleteSingleProps<ItemT>): JSX.Element;
export {};
