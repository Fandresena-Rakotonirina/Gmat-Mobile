{"version":3,"sources":["useKeyboardHeight.tsx"],"names":["React","useSharedValue","useKeyboardHeight","dimensions","isTouchDevice","window","matchMedia","matches","keyboardHeight","height","useEffect","virtualKeyboard","navigator","handler","event","target","value","addEventListener","removeEventListener","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,yBAA/B;;AAEA,SAASC,iBAAT,CAA2BC,UAA3B,EAA0E;AACxE,QAAMC,aAAa,GAAGC,MAAM,CAACC,UAAP,CAAkB,mBAAlB,EAAuCC,OAA7D,CADwE,CAGxE;;AACA,QAAMC,cAAc,GAAGP,cAAc,CACnCG,aAAa,GAAGD,UAAU,CAACM,MAAX,GAAoB,CAAvB,GAA2B,CADL,CAArC;AAIAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB;AACA,UAAMC,eAAe,GAAIC,SAAD,CAAmBD,eAA3C;;AACA,QAAIA,eAAJ,EAAqB;AACnB,YAAME,OAAO,GAAIC,KAAD,IAAgB;AAC9B,cAAM;AAAEL,UAAAA;AAAF,YAAaK,KAAK,CAACC,MAAzB;AACAP,QAAAA,cAAc,CAACQ,KAAf,GAAuBP,MAAvB;AACD,OAHD;;AAIAE,MAAAA,eAAe,CAACM,gBAAhB,CAAiC,iBAAjC,EAAoDJ,OAApD;AACA,aAAO,MAAM;AACXF,QAAAA,eAAe,CAACO,mBAAhB,CAAoC,iBAApC,EAAuDL,OAAvD;AACD,OAFD;AAGD;;AACD,WAAOM,SAAP;AACD,GAdD,EAcG,CAACX,cAAD,CAdH;AAeA,SAAOA,cAAP;AACD;;AAED,eAAeN,iBAAf","sourcesContent":["import * as React from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\n\nfunction useKeyboardHeight(dimensions: { width: number; height: number }) {\n  const isTouchDevice = window.matchMedia('(pointer: coarse)').matches;\n\n  // If it's a touch device we conclude that half of the screen will be used by virtual keyboard\n  const keyboardHeight = useSharedValue(\n    isTouchDevice ? dimensions.height / 2 : 0\n  );\n\n  React.useEffect(() => {\n    // is this api is implemented yet, otherwise we fallback on behaviour above\n    const virtualKeyboard = (navigator as any).virtualKeyboard;\n    if (virtualKeyboard) {\n      const handler = (event: any) => {\n        const { height } = event.target;\n        keyboardHeight.value = height;\n      };\n      virtualKeyboard.addEventListener('geometrychanged', handler);\n      return () => {\n        virtualKeyboard.removeEventListener('geometrychanged', handler);\n      };\n    }\n    return undefined;\n  }, [keyboardHeight]);\n  return keyboardHeight;\n}\n\nexport default useKeyboardHeight;\n"]}