import * as React from 'react';
import useLatest from './useLatest';
export default function useAutomaticScroller({
  highlightedIndex,
  sections,
  groupBy
}) {
  const viewableItems = React.useRef([]);
  const isSectionList = !!groupBy;
  const flatListRef = React.useRef(null);
  const sectionListRef = React.useRef(null);
  const sectionsRef = useLatest(sections);
  const onViewableItemsChanged = React.useCallback(p => {
    viewableItems.current = p.viewableItems;
  }, [viewableItems]);
  React.useEffect(() => {
    if (isSectionList) {
      const viewAbleIndexes = viewableItems.current.map(({
        index,
        section
      }) => {
        const sectionIndex = sectionsRef.current.indexOf(section);
        const indexesBefore = sectionsRef.current.filter((_, i) => i < sectionIndex).reduce((a, b) => a + b.data.length, 0);

        if (index === null || index === undefined) {
          return null;
        }

        return {
          sectionIndex: sectionsRef.current.indexOf(section),
          index: index,
          realIndex: indexesBefore + (index || 0)
        };
      }).filter(n => n);
      const isViewable = viewAbleIndexes.map(vi => vi.index).includes(highlightedIndex);

      if (!isViewable) {
        var _sectionListRef$curre;

        const scrollParams = findSectionScrollParams({
          sections: sectionsRef.current,
          highlightedIndex
        });
        (_sectionListRef$curre = sectionListRef.current) === null || _sectionListRef$curre === void 0 ? void 0 : _sectionListRef$curre.scrollToLocation(scrollParams);
      }
    } else {
      var _flatListRef$current;

      const isViewable = viewableItems.current.map(vi => vi.index).includes(highlightedIndex);

      if (isViewable) {
        return;
      }

      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToIndex({
        index: highlightedIndex,
        animated: false
      });
    }
  }, [highlightedIndex, sectionsRef, flatListRef, isSectionList]);
  return {
    onViewableItemsChanged,
    ref: isSectionList ? sectionListRef : flatListRef
  };
}

function findSectionScrollParams({
  sections,
  highlightedIndex
}) {
  let i = 0;

  for (let sectionIndex = 0; sectionIndex < sections.length; sectionIndex++) {
    const section = sections[sectionIndex];

    for (let itemIndex = 0; itemIndex < section.data.length; itemIndex++) {
      if (i === highlightedIndex) {
        return {
          itemIndex,
          sectionIndex,
          animated: false
        };
      }

      i++;
    }
  }

  return {
    itemIndex: 0,
    sectionIndex: 0,
    animated: false
  };
}
//# sourceMappingURL=useAutomaticScroller.js.map