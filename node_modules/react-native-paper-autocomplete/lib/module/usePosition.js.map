{"version":3,"sources":["usePosition.tsx"],"names":["React","useLayoutEffect","useDerivedValue","useSharedValue","usePosition","inputContainerRef","scrollX","scrollY","initial","useState","getXYFromRef","x","y","coordinates","value","ref","getBoundingClientRect","current","window","node","isElement","nodeType"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAEEC,eAFF,EAGEC,cAHF,QAIO,yBAJP;AAMA,eAAe,SAASC,WAAT,CAAqB;AAClCC,EAAAA,iBADkC;AAElCC,EAAAA,OAFkC;AAGlCC,EAAAA;AAHkC,CAArB,EAQZ;AACD,QAAM,CAACC,OAAD,IAAYR,KAAK,CAACS,QAAN,CAChBC,YAAY,CAACL,iBAAD,EAAoB;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAApB,CADI,CAAlB;AAGA,QAAMI,CAAC,GAAGR,cAAc,CAACK,OAAO,CAACG,CAAT,CAAxB;AACA,QAAMC,CAAC,GAAGT,cAAc,CAACK,OAAO,CAACI,CAAT,CAAxB;AAEAX,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMY,WAAW,GAAGH,YAAY,CAACL,iBAAD,EAAoB;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAApB,CAAhC;AACAI,IAAAA,CAAC,CAACG,KAAF,GAAUD,WAAW,CAACF,CAAtB;AACAC,IAAAA,CAAC,CAACE,KAAF,GAAUD,WAAW,CAACD,CAAtB;AACD,GAJc,CAAf;AAMA,SAAOV,eAAe,CAAC,MAAM;AAC3B,WAAO;AACLS,MAAAA,CAAC,EAAEA,CAAC,CAACG,KADA;AAELF,MAAAA,CAAC,EAAEA,CAAC,CAACE;AAFA,KAAP;AAID,GALqB,EAKnB,CAACH,CAAD,EAAIC,CAAJ,CALmB,CAAtB;AAMD;;AAED,SAASF,YAAT,CACEK,GADF,EAEE;AACET,EAAAA,OADF;AAEEC,EAAAA;AAFF,CAFF,EASE;AAAA;;AACA,QAAM;AAAEI,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAWI,qBAAqB,CAACD,GAAG,CAACE,OAAL,CAAtC;AACA,SAAO;AACLN,IAAAA,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACQ,KAAZ,IAAqB,YAAAI,MAAM,UAAN,0CAAQZ,OAAR,KAAmB,CAAxC,CADE;AAELM,IAAAA,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACO,KAAZ,IAAqB,aAAAI,MAAM,UAAN,4CAAQX,OAAR,KAAmB,CAAxC;AAFE,GAAP;AAID;;AAED,SAASS,qBAAT,CAA+BG,IAA/B,EAAkD;AAChD,MAAIA,IAAJ,EAAU;AACR,UAAMC,SAAS,GAAGD,IAAI,CAACE,QAAL,KAAkB,CAApC;AAAuC;;AACvC,QAAID,SAAS,IAAI,OAAOD,IAAI,CAACH,qBAAZ,KAAsC,UAAvD,EAAmE;AACjE,aAAOG,IAAI,CAACH,qBAAL,EAAP;AACD;AACF;;AACD,SAAO;AAAEL,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect } from 'react';\nimport Animated, {\n  SharedValue,\n  useDerivedValue,\n  useSharedValue,\n} from 'react-native-reanimated';\n\nexport default function usePosition({\n  inputContainerRef,\n  scrollX,\n  scrollY,\n}: {\n  scrollX: SharedValue<number>;\n  scrollY: SharedValue<number>;\n  inputContainerRef: React.RefObject<Animated.View>;\n}) {\n  const [initial] = React.useState(\n    getXYFromRef(inputContainerRef, { scrollX, scrollY })\n  );\n  const x = useSharedValue(initial.x);\n  const y = useSharedValue(initial.y);\n\n  useLayoutEffect(() => {\n    const coordinates = getXYFromRef(inputContainerRef, { scrollX, scrollY });\n    x.value = coordinates.x;\n    y.value = coordinates.y;\n  });\n\n  return useDerivedValue(() => {\n    return {\n      x: x.value,\n      y: y.value,\n    };\n  }, [x, y]);\n}\n\nfunction getXYFromRef(\n  ref: React.RefObject<Animated.View>,\n  {\n    scrollX,\n    scrollY,\n  }: {\n    scrollX: SharedValue<number>;\n    scrollY: SharedValue<number>;\n  }\n) {\n  const { x, y } = getBoundingClientRect(ref.current as any);\n  return {\n    x: x + scrollX.value + (window?.scrollX || 0),\n    y: y + scrollY.value + (window?.scrollY || 0),\n  };\n}\n\nfunction getBoundingClientRect(node: HTMLElement) {\n  if (node) {\n    const isElement = node.nodeType === 1; /* Node.ELEMENT_NODE */\n    if (isElement && typeof node.getBoundingClientRect === 'function') {\n      return node.getBoundingClientRect();\n    }\n  }\n  return { x: 0, y: 0 };\n}\n"]}