import * as React from 'react';
import { useLayoutEffect } from 'react';
import { useDerivedValue, useSharedValue } from 'react-native-reanimated';
export default function usePosition({
  inputContainerRef,
  scrollX,
  scrollY
}) {
  const [initial] = React.useState(getXYFromRef(inputContainerRef, {
    scrollX,
    scrollY
  }));
  const x = useSharedValue(initial.x);
  const y = useSharedValue(initial.y);
  useLayoutEffect(() => {
    const coordinates = getXYFromRef(inputContainerRef, {
      scrollX,
      scrollY
    });
    x.value = coordinates.x;
    y.value = coordinates.y;
  });
  return useDerivedValue(() => {
    return {
      x: x.value,
      y: y.value
    };
  }, [x, y]);
}

function getXYFromRef(ref, {
  scrollX,
  scrollY
}) {
  var _window, _window2;

  const {
    x,
    y
  } = getBoundingClientRect(ref.current);
  return {
    x: x + scrollX.value + (((_window = window) === null || _window === void 0 ? void 0 : _window.scrollX) || 0),
    y: y + scrollY.value + (((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.scrollY) || 0)
  };
}

function getBoundingClientRect(node) {
  if (node) {
    const isElement = node.nodeType === 1;
    /* Node.ELEMENT_NODE */

    if (isElement && typeof node.getBoundingClientRect === 'function') {
      return node.getBoundingClientRect();
    }
  }

  return {
    x: 0,
    y: 0
  };
}
//# sourceMappingURL=usePosition.js.map