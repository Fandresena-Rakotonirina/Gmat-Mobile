"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAutomaticScroller;

var React = _interopRequireWildcard(require("react"));

var _useLatest = _interopRequireDefault(require("./useLatest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useAutomaticScroller({
  highlightedIndex,
  sections,
  groupBy
}) {
  const viewableItems = React.useRef([]);
  const isSectionList = !!groupBy;
  const flatListRef = React.useRef(null);
  const sectionListRef = React.useRef(null);
  const sectionsRef = (0, _useLatest.default)(sections);
  const onViewableItemsChanged = React.useCallback(p => {
    viewableItems.current = p.viewableItems;
  }, [viewableItems]);
  React.useEffect(() => {
    if (isSectionList) {
      const viewAbleIndexes = viewableItems.current.map(({
        index,
        section
      }) => {
        const sectionIndex = sectionsRef.current.indexOf(section);
        const indexesBefore = sectionsRef.current.filter((_, i) => i < sectionIndex).reduce((a, b) => a + b.data.length, 0);

        if (index === null || index === undefined) {
          return null;
        }

        return {
          sectionIndex: sectionsRef.current.indexOf(section),
          index: index,
          realIndex: indexesBefore + (index || 0)
        };
      }).filter(n => n);
      const isViewable = viewAbleIndexes.map(vi => vi.index).includes(highlightedIndex);

      if (!isViewable) {
        var _sectionListRef$curre;

        const scrollParams = findSectionScrollParams({
          sections: sectionsRef.current,
          highlightedIndex
        });
        (_sectionListRef$curre = sectionListRef.current) === null || _sectionListRef$curre === void 0 ? void 0 : _sectionListRef$curre.scrollToLocation(scrollParams);
      }
    } else {
      var _flatListRef$current;

      const isViewable = viewableItems.current.map(vi => vi.index).includes(highlightedIndex);

      if (isViewable) {
        return;
      }

      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToIndex({
        index: highlightedIndex,
        animated: false
      });
    }
  }, [highlightedIndex, sectionsRef, flatListRef, isSectionList]);
  return {
    onViewableItemsChanged,
    ref: isSectionList ? sectionListRef : flatListRef
  };
}

function findSectionScrollParams({
  sections,
  highlightedIndex
}) {
  let i = 0;

  for (let sectionIndex = 0; sectionIndex < sections.length; sectionIndex++) {
    const section = sections[sectionIndex];

    for (let itemIndex = 0; itemIndex < section.data.length; itemIndex++) {
      if (i === highlightedIndex) {
        return {
          itemIndex,
          sectionIndex,
          animated: false
        };
      }

      i++;
    }
  }

  return {
    itemIndex: 0,
    sectionIndex: 0,
    animated: false
  };
}
//# sourceMappingURL=useAutomaticScroller.js.map