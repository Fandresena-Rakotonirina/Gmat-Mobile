"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFlatListItemLayout = getFlatListItemLayout;
exports.defaultFilterOptions = defaultFilterOptions;
exports.default = Autocomplete;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativePaper = require("react-native-paper");

var _color = _interopRequireDefault(require("color"));

var _useLatest = _interopRequireDefault(require("./useLatest"));

var _useAutomaticScroller = _interopRequireDefault(require("./useAutomaticScroller"));

var _AutocompleteItem = _interopRequireDefault(require("./AutocompleteItem"));

var _useHighlighted = _interopRequireDefault(require("./useHighlighted"));

var _PortalContent = _interopRequireDefault(require("./PortalContent"));

var _useComponentDimensions = _interopRequireDefault(require("./useComponentDimensions"));

var _PositionedSurface = _interopRequireDefault(require("./PositionedSurface"));

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _AutocompleteContext = require("./AutocompleteContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getFlatListItemLayout(_, index) {
  return {
    length: 63,
    offset: 63 * index,
    index
  };
} // const AnimatedTextInput = createElement(TextInput);


function defaultFilterOptions(a, {
  isFocusedAndValueIsSameAsSearch,
  inputValue,
  getOptionLabel,
  getOptionDescription
}) {
  if (isFocusedAndValueIsSameAsSearch) {
    return a;
  }

  return a === null || a === void 0 ? void 0 : a.filter(o => {
    const oAny = o;

    if (!inputValue) {
      return true;
    }

    const search = inputValue.toLowerCase();
    const label = getOptionLabel(oAny) || '';
    const description = (getOptionDescription === null || getOptionDescription === void 0 ? void 0 : getOptionDescription(oAny)) || '';
    return label.toLowerCase().includes(search) || description.toLowerCase().includes(search);
  });
}

function removeSelected(a, {
  value: rValue,
  multiple,
  getOptionValue
}) {
  return a === null || a === void 0 ? void 0 : a.filter(o => {
    let selected = multiple ? rValue === null || rValue === void 0 ? void 0 : rValue.some(v => getOptionValue(v) === getOptionValue(o)) : rValue && getOptionValue(rValue) === getOptionValue(o);
    return !selected;
  });
}

function Autocomplete(props) {
  // const window = useWindowDimensions();
  const theme = (0, _reactNativePaper.useTheme)();
  const {
    scrollableRef,
    scrollX,
    scrollY
  } = (0, _AutocompleteContext.useAutocomplete)();
  const {
    testID,
    loading,
    ListComponent,
    inputProps: {
      onChangeText,
      defaultValue,
      ...inputProps
    } = {},
    listProps,
    groupBy,
    multiple,
    options,
    style,
    value,
    getOptionValue = option => option.id || option.key || option.value,
    getOptionLabel = option => option.label || option.name || option.title,
    getOptionDescription = option => option.description,
    getOptionIcon = option => option.icon,
    filterOptions = (a, b) => defaultFilterOptions(a, b)
  } = props;
  const {
    value: values,
    onChange: onChangeMultiple
  } = props;
  const {
    value: singleValue,
    onChange: onChangeSingle
  } = props;
  const inputContainerDimensions = (0, _useComponentDimensions.default)();
  const chipsDimensions = (0, _useComponentDimensions.default)();
  const chipContainerRef = (0, _reactNativeReanimated.useAnimatedRef)();
  const inputContainerRef = (0, _reactNativeReanimated.useAnimatedRef)();
  const inputRef = React.useRef(null);
  const [inputValue, setInputValue] = React.useState(defaultValue || '');
  const [visible, setVisible] = React.useState(false);
  const [focused, setFocused] = React.useState(false);
  const getOptionLabelRef = (0, _useLatest.default)(getOptionLabel);
  React.useEffect(() => {
    if (!multiple) {
      if (singleValue) {
        setInputValue(getOptionLabelRef.current(singleValue));
      } else {
        setInputValue('');
      }
    }
  }, [getOptionLabelRef, multiple, singleValue]);

  const changeText = v => {
    // setVisible(true);
    setInputValue(v);
    onChangeText === null || onChangeText === void 0 ? void 0 : onChangeText(v);
  };

  const blur = _ => {
    // console.log('blur', e);
    // setVisible(false);
    setFocused(false);
  };

  const focus = _ => {
    setVisible(true);
    setFocused(true);
  };

  const filterOptionsRef = (0, _useLatest.default)(filterOptions);
  const groupByRef = (0, _useLatest.default)(groupBy);
  const getOptionValueRef = (0, _useLatest.default)(getOptionValue);
  const getOptionDescriptionRef = (0, _useLatest.default)(getOptionDescription);
  const isFocusedAndValueIsSameAsSearch = singleValue && focused && inputValue === getOptionLabel(singleValue) || false; // console.log({
  //   singleValue,
  //   focused,
  //   inputValue,
  //   inputValueCompareTo: singleValue && getOptionLabel(singleValue),
  //   isFocusedAndValueIsSameAsSearch,
  // });

  const data = React.useMemo(() => filterOptionsRef.current(removeSelected(options, {
    value,
    multiple,
    getOptionValue: getOptionValueRef.current
  }), {
    isFocusedAndValueIsSameAsSearch,
    getOptionLabel: getOptionLabelRef.current,
    getOptionDescription: getOptionDescriptionRef.current,
    inputValue
  }), [isFocusedAndValueIsSameAsSearch, filterOptionsRef, inputValue, value, multiple, options, getOptionValueRef, getOptionLabelRef, getOptionDescriptionRef]);
  const {
    highlightedIndex,
    handleKeyPress
  } = (0, _useHighlighted.default)({
    inputValue,
    setInputValue,
    data,
    multiple,
    values,
    onChangeMultiple,
    onChangeSingle,
    inputRef,
    setVisible
  });
  const sections = React.useMemo(() => {
    if (!groupByRef || !groupByRef.current) {
      return [];
    }

    let grouped = {};
    data === null || data === void 0 ? void 0 : data.forEach(o => {
      const key = groupByRef.current(o);
      const current = grouped[key];

      if (current) {
        current.push(o);
      } else {
        grouped[key] = [o];
      }
    });
    return Object.keys(grouped).map(k => ({
      title: k,
      data: grouped[k]
    }));
  }, [data, groupByRef]);
  const press = React.useCallback(o => {
    if (multiple) {
      var _inputRef$current;

      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
      onChangeMultiple([...(values || []), o]);
      setInputValue('');
    } else {
      onChangeSingle(o);
      setVisible(false);
    }
  }, [multiple, setInputValue, onChangeMultiple, onChangeSingle, values]);
  const remove = React.useCallback(o => {
    if (multiple) {
      const excludeCurrent = (values || []).filter(vo => getOptionValueRef.current(vo) !== getOptionValueRef.current(o));
      onChangeMultiple(excludeCurrent);
    }
  }, [getOptionValueRef, multiple, onChangeMultiple, values]);
  const automaticScrollProps = (0, _useAutomaticScroller.default)({
    highlightedIndex,
    sections,
    groupBy
  });
  const minimalDropdownWidth = 250;
  const dropdownWidth = inputContainerDimensions.width;
  const remainingSpace = (0, _reactNativeReanimated.useDerivedValue)(() => inputContainerDimensions.width.value - chipsDimensions.width.value, [inputContainerDimensions.width, chipsDimensions.width]);
  const shouldEnter = (0, _reactNativeReanimated.useDerivedValue)(() => chipsDimensions.height.value > 45 || remainingSpace.value < minimalDropdownWidth, [chipsDimensions.height, remainingSpace]);
  const hasMultipleValue = multiple && (values || []).length > 0; // const animatedInputStyle = useAnimatedStyle(() => {
  //   return {
  //     height: hasMultipleValue
  //       ? shouldEnter
  //         ? chipsDimensions.height.value + 36 + 46
  //         : chipsDimensions.height.value + 36
  //       : undefined,
  //   };
  // }, [chipsDimensions.height, hasMultipleValue, shouldEnter]);

  const highlightedColor = React.useMemo(() => theme.dark ? (0, _color.default)(theme.colors.onBackground).alpha(0.2).rgb().string() : (0, _color.default)(theme.colors.onBackground).alpha(0.1).rgb().string(), [theme.dark, theme.colors.onBackground]);
  const innerListProps = {
    testID: `${testID}-autocomplete-list`,
    keyboardDismissMode: 'on-drag',
    keyboardShouldPersistTaps: 'handled',
    contentInsetAdjustmentBehavior: 'always',
    renderItem: ({
      item,
      index,
      section
    }) => {
      const key = getOptionValue(item);
      let realIndex = index;

      if (section) {
        // what the hell...
        const sectionIndex = sections.indexOf(section);
        const indexesBefore = sections.filter((_, i) => i < sectionIndex).reduce((a, b) => a + b.data.length, 0);
        realIndex = indexesBefore + index;
      }

      return /*#__PURE__*/React.createElement(_AutocompleteItem.default, {
        testID: `${testID}-autocomplete-item-${key}`,
        key: key,
        highlightedColor: highlightedColor,
        title: getOptionLabel(item),
        description: getOptionDescription(item),
        icon: getOptionIcon(item),
        selected: highlightedIndex === realIndex,
        onPress: press,
        option: item
      });
    },
    keyExtractor: item => getOptionValue(item),
    extraData: {
      highlightedIndex
    },
    ...automaticScrollProps
  };
  const SectionListComponent = ListComponent ? ListComponent : _reactNative.SectionList;
  const FinalListComponent = ListComponent ? ListComponent : _reactNative.FlatList;
  const inputStyle = inputProps === null || inputProps === void 0 ? void 0 : inputProps.style;
  const backgroundColor = React.useMemo(() => {
    if (inputStyle) {
      const flattenStyle = _reactNative.StyleSheet.flatten(inputStyle);

      if (flattenStyle.backgroundColor) {
        return flattenStyle.backgroundColor;
      }
    }

    return theme.colors.background;
  }, [theme, inputStyle]);
  const onPressOutside = React.useCallback(() => {
    setVisible(false);
  }, [setVisible]); // console.log({
  //   visible,
  //   inputDim: inputContainerDimensions.dimensions,
  //   chipsDimensions,
  //   shouldEnter,
  // });

  const textInputIcon = singleValue ? getOptionIcon(singleValue) : undefined;
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.menu, style],
    accessibilityRole: "menu",
    testID: testID
  }, /*#__PURE__*/React.createElement(_reactNativeReanimated.default.View, {
    ref: inputContainerRef,
    onLayout: inputContainerDimensions.onLayout,
    style: styles.inputContainer
  }, /*#__PURE__*/React.createElement(_reactNativePaper.TextInput, _extends({
    ref: inputRef,
    onBlur: blur,
    onFocus: focus,
    blurOnSubmit: false,
    value: hasMultipleValue || inputValue.length > 0 ? ' ' : '',
    left: textInputIcon && !props.disableInputPrefixIcon ? /*#__PURE__*/React.createElement(_reactNativePaper.TextInput.Icon, {
      icon: textInputIcon
    }) : undefined
  }, inputProps, {
    style: [inputProps.style, styles.full] // @ts-ignore web only props
    ,
    accessibilityHasPopup: true,
    render: params => {
      return /*#__PURE__*/React.createElement(NativeTextInputWithAnimatedStyles, _extends({}, params, {
        selectTextOnFocus: true,
        value: inputValue,
        onChangeText: changeText,
        onKeyPress: handleKeyPress,
        shouldEnter: shouldEnter,
        chipsHeight: chipsDimensions.height,
        chipsWidth: chipsDimensions.width,
        multiple: multiple
      }));
    }
  })), multiple && visible || !multiple && value ? /*#__PURE__*/React.createElement(_reactNativePaper.IconButton, {
    testID: "autocomplete-close",
    size: 20,
    icon: "close",
    style: styles.closeButton,
    onPress: () => {
      setVisible(false);
      setInputValue('');

      if (multiple) {
        onChangeMultiple([]);
      } else {
        onChangeSingle(undefined);
      }
    }
  }) : null, /*#__PURE__*/React.createElement(_reactNativePaper.IconButton, {
    testID: `${testID}-autocomplete-arrow`,
    style: styles.arrowIconButton,
    icon: visible ? 'menu-up' : 'menu-down',
    onPress: () => {
      if (visible) {
        var _inputRef$current2;

        (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();
        setVisible(false);
      } else {
        var _inputRef$current3;

        (_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.focus();
        setVisible(true);
      }
    }
  })), multiple && /*#__PURE__*/React.createElement(_reactNativeReanimated.default.View, {
    ref: chipContainerRef,
    testID: `${testID}-autocomplete-chips`,
    style: [styles.chipsWrapper, {
      backgroundColor
    }],
    onLayout: chipsDimensions.onLayout,
    pointerEvents: "box-none"
  }, values === null || values === void 0 ? void 0 : values.map(o => /*#__PURE__*/React.createElement(_reactNativePaper.Chip, {
    key: getOptionValue(o),
    onClose: () => remove(o),
    style: styles.chip,
    icon: getOptionIcon(o)
  }, getOptionLabel(o)))), loading ? /*#__PURE__*/React.createElement(_reactNativePaper.ActivityIndicator, {
    style: styles.loading
  }) : null, visible ? /*#__PURE__*/React.createElement(_PortalContent.default, {
    visible: visible,
    onPressOutside: onPressOutside
  }, /*#__PURE__*/React.createElement(_PositionedSurface.default, {
    scrollableRef: scrollableRef,
    theme: theme,
    dropdownWidth: dropdownWidth,
    inputContainerRef: inputContainerRef,
    inputContainerHeight: inputContainerDimensions.height,
    scrollX: scrollX,
    scrollY: scrollY
  }, groupBy ? /*#__PURE__*/React.createElement(SectionListComponent, _extends({}, listProps, innerListProps, {
    sections: sections,
    renderSectionHeader: ({
      section: {
        title
      }
    }) => /*#__PURE__*/React.createElement(_reactNativePaper.List.Subheader, null, title),
    onScrollToIndexFailed: info => {
      // TODO: make sure everything uses fixed heights so this error won't be there
      // e.g.:  getItemLayout={getSectionListItemLayout}
      console.error(info);
    }
  })) : /*#__PURE__*/React.createElement(FinalListComponent, _extends({}, listProps, innerListProps, {
    getItemLayout: getFlatListItemLayout,
    data: data
  })))) : null);
}

const AnimatedNativeInput = _reactNativeReanimated.default.createAnimatedComponent(_reactNative.TextInput);

const NativeTextInputWithAnimatedStyles = /*#__PURE__*/React.forwardRef(({
  shouldEnter,
  chipsHeight,
  chipsWidth,
  style,
  multiple,
  ...rest
}, forwardedRef) => {
  const originalStyle = _reactNative.StyleSheet.flatten(style);

  const orgTop = Number(originalStyle.paddingTop) || 0;
  const orgLeft = Number(originalStyle.paddingLeft) || 0;
  const height = Number(originalStyle.height) || 0;
  const animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    if (!multiple) {
      return {};
    }

    const addTop = shouldEnter.value ? chipsHeight.value + 18 : 18;
    return {
      paddingTop: orgTop + addTop,
      paddingLeft: orgLeft + (shouldEnter.value ? 0 : chipsWidth.value),
      height: height + addTop
    };
  }, [multiple, orgLeft, orgTop, shouldEnter, chipsHeight, chipsWidth]);
  return /*#__PURE__*/React.createElement(AnimatedNativeInput, _extends({
    ref: forwardedRef
  }, rest, {
    style: [style, animatedStyle]
  }));
});

const styles = _reactNative.StyleSheet.create({
  modalBackground: {
    flex: 1
  },
  menu: {
    position: 'relative'
  },
  chipsWrapper: {
    flexDirection: 'row',
    position: 'absolute',
    flexWrap: 'wrap',
    top: 32,
    left: 12
  },
  chip: {
    marginRight: 6,
    marginBottom: 6,
    flexShrink: 1
  },
  inputContainer: {
    alignItems: 'center',
    flexDirection: 'row'
  },
  full: {
    flex: 1
  },
  closeButton: {
    position: 'absolute',
    bottom: 6,
    right: 36
  },
  arrowIconButton: {
    position: 'absolute',
    bottom: 5,
    right: 0
  },
  loading: {
    position: 'absolute',
    right: 12,
    top: 24
  }
});
//# sourceMappingURL=Autocomplete.js.map