"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNativePaper = require("react-native-paper");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function AutocompleteItem({
  testID,
  selected,
  title,
  description,
  icon,
  option,
  onPress,
  highlightedColor
}) {
  return /*#__PURE__*/React.createElement(_reactNativePaper.List.Item, {
    android_disableSound: undefined,
    testID: testID,
    accessibilityRole: "menuitem",
    accessibilityState: {
      selected
    },
    left: icon ? leftProps => /*#__PURE__*/React.createElement(_reactNativePaper.List.Icon, _extends({
      icon: icon
    }, leftProps)) : undefined,
    title: title,
    description: description,
    style: selected ? {
      backgroundColor: highlightedColor
    } : undefined,
    onPress: () => {
      onPress(option);
    }
  });
}

var _default = /*#__PURE__*/React.memo(AutocompleteItem);

exports.default = _default;
//# sourceMappingURL=AutocompleteItem.js.map