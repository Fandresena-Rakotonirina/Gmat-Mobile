"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNativeReanimated = require("react-native-reanimated");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useKeyboardHeight(dimensions) {
  const isTouchDevice = window.matchMedia('(pointer: coarse)').matches; // If it's a touch device we conclude that half of the screen will be used by virtual keyboard

  const keyboardHeight = (0, _reactNativeReanimated.useSharedValue)(isTouchDevice ? dimensions.height / 2 : 0);
  React.useEffect(() => {
    // is this api is implemented yet, otherwise we fallback on behaviour above
    const virtualKeyboard = navigator.virtualKeyboard;

    if (virtualKeyboard) {
      const handler = event => {
        const {
          height
        } = event.target;
        keyboardHeight.value = height;
      };

      virtualKeyboard.addEventListener('geometrychanged', handler);
      return () => {
        virtualKeyboard.removeEventListener('geometrychanged', handler);
      };
    }

    return undefined;
  }, [keyboardHeight]);
  return keyboardHeight;
}

var _default = useKeyboardHeight;
exports.default = _default;
//# sourceMappingURL=useKeyboardHeight.js.map