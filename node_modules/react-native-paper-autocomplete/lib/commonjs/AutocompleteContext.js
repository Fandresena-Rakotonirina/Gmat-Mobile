"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAutocomplete = useAutocomplete;
exports.AutocompleteContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNativeReanimated = require("react-native-reanimated");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const AutocompleteContext = /*#__PURE__*/React.createContext(undefined);
exports.AutocompleteContext = AutocompleteContext;

function useAutocomplete() {
  let values = React.useContext(AutocompleteContext);

  if (!values) {
    console.warn('[react-native-paper-autocomplete] your autocomplete is currently not wrapped inside a supported ' + 'autocomplete scrollable, this could result in unexpected behavior and bugs. If this is inside a ' + 'non-scrollable container you can ignore this message');
  }

  const zero = (0, _reactNativeReanimated.useSharedValue)(0);
  const fallbackValues = React.useMemo(() => {
    const fb = {
      scrollableRef: {
        current: null
      },
      scrollX: zero,
      scrollY: zero
    };
    return fb;
  }, [zero]);
  return values || fallbackValues;
}
//# sourceMappingURL=AutocompleteContext.js.map