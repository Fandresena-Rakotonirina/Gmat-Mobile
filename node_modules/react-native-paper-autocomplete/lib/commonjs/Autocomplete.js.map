{"version":3,"sources":["Autocomplete.tsx"],"names":["getFlatListItemLayout","_","index","length","offset","defaultFilterOptions","a","isFocusedAndValueIsSameAsSearch","inputValue","getOptionLabel","getOptionDescription","filter","o","oAny","search","toLowerCase","label","description","includes","removeSelected","value","rValue","multiple","getOptionValue","selected","some","v","Autocomplete","props","theme","scrollableRef","scrollX","scrollY","testID","loading","ListComponent","inputProps","onChangeText","defaultValue","listProps","groupBy","options","style","option","id","key","name","title","getOptionIcon","icon","filterOptions","b","values","onChange","onChangeMultiple","singleValue","onChangeSingle","inputContainerDimensions","chipsDimensions","chipContainerRef","inputContainerRef","inputRef","React","useRef","setInputValue","useState","visible","setVisible","focused","setFocused","getOptionLabelRef","useEffect","current","changeText","blur","focus","filterOptionsRef","groupByRef","getOptionValueRef","getOptionDescriptionRef","data","useMemo","highlightedIndex","handleKeyPress","sections","grouped","forEach","push","Object","keys","map","k","press","useCallback","remove","excludeCurrent","vo","automaticScrollProps","minimalDropdownWidth","dropdownWidth","width","remainingSpace","shouldEnter","height","hasMultipleValue","highlightedColor","dark","colors","onBackground","alpha","rgb","string","innerListProps","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","renderItem","item","section","realIndex","sectionIndex","indexOf","indexesBefore","i","reduce","keyExtractor","extraData","SectionListComponent","SectionList","FinalListComponent","FlatList","inputStyle","backgroundColor","flattenStyle","StyleSheet","flatten","background","onPressOutside","textInputIcon","undefined","styles","menu","onLayout","inputContainer","disableInputPrefixIcon","full","params","closeButton","arrowIconButton","chipsWrapper","chip","info","console","error","AnimatedNativeInput","Animated","createAnimatedComponent","NativeTextInput","NativeTextInputWithAnimatedStyles","forwardRef","chipsHeight","chipsWidth","rest","forwardedRef","originalStyle","orgTop","Number","paddingTop","orgLeft","paddingLeft","animatedStyle","addTop","create","modalBackground","flex","position","flexDirection","flexWrap","top","left","marginRight","marginBottom","flexShrink","alignItems","bottom","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TextInputProps,\n  View,\n  ViewStyle,\n  StyleSheet,\n  TextInput as NativeTextInput,\n  TextInputFocusEventData,\n  NativeSyntheticEvent,\n  FlatList,\n  SectionList,\n  // useWindowDimensions,\n  FlatListProps,\n} from 'react-native';\nimport {\n  ActivityIndicator,\n  Chip,\n  IconButton,\n  List,\n  TextInput,\n  useTheme,\n} from 'react-native-paper';\nimport Color from 'color';\n\nimport useLatest from './useLatest';\nimport useAutomaticScroller from './useAutomaticScroller';\nimport AutocompleteItem from './AutocompleteItem';\nimport type { IconSource } from './icon';\nimport useHighlighted from './useHighlighted';\nimport PortalContent from './PortalContent';\nimport useComponentDimensions from './useComponentDimensions';\nimport PositionedSurface from './PositionedSurface';\nimport Animated, {\n  DerivedValue,\n  SharedValue,\n  useAnimatedRef,\n  useAnimatedStyle,\n  useDerivedValue,\n} from 'react-native-reanimated';\nimport { useAutocomplete } from './AutocompleteContext';\n\n// https://ej2.syncfusion.com/react/documentation/drop-down-list/accessibility/\n\ntype PaperInputProps = React.ComponentProps<typeof TextInput>;\n\nexport function getFlatListItemLayout(\n  _: any[] | undefined | null,\n  index: number\n) {\n  return {\n    length: 63,\n    offset: 63 * index,\n    index,\n  };\n}\n\n// const AnimatedTextInput = createElement(TextInput);\nexport interface FilterOptionsParams<ItemT> {\n  isFocusedAndValueIsSameAsSearch: boolean;\n  inputValue: string;\n  getOptionLabel: (option: ItemT) => string;\n  getOptionDescription?: (option: ItemT) => string;\n}\n\nexport interface AutocompleteBaseProps<ItemT> {\n  testID?: string;\n  loading?: boolean;\n  listProps?: Omit<\n    FlatListProps<ItemT>,\n    'data' | 'renderItem' | 'ref' | 'keyExtractor' | 'extraData'\n  >;\n  inputProps?: PaperInputProps;\n  ListComponent?: any;\n  options: ReadonlyArray<ItemT> | null | undefined;\n  groupBy?: (option: ItemT) => string;\n  renderInput?: (params: TextInputProps) => any;\n  style?: ViewStyle;\n  disableInputPrefixIcon?: boolean;\n  getOptionLabel?: (option: ItemT) => string;\n  getOptionDescription?: (option: ItemT) => string | number;\n  getOptionValue?: (option: ItemT) => string | number;\n  getOptionIcon?: (option: ItemT) => IconSource;\n  filterOptions?: (\n    a: ReadonlyArray<ItemT> | null | undefined,\n    {\n      isFocusedAndValueIsSameAsSearch,\n      inputValue,\n      getOptionLabel,\n      getOptionDescription,\n    }: FilterOptionsParams<ItemT>\n  ) => ReadonlyArray<ItemT> | null | undefined;\n}\n\nexport interface AutocompleteMultipleProps<ItemT>\n  extends AutocompleteBaseProps<ItemT> {\n  multiple: true;\n  value: ItemT[] | null | undefined;\n  onChange: (v: ItemT[]) => void;\n}\n\nexport interface AutocompleteSingleProps<ItemT>\n  extends AutocompleteBaseProps<ItemT> {\n  multiple?: undefined | false;\n  value: ItemT | null | undefined;\n  onChange: (v: ItemT | undefined) => void;\n}\n\nexport function defaultFilterOptions<ItemT>(\n  a: ReadonlyArray<ItemT> | null | undefined,\n  {\n    isFocusedAndValueIsSameAsSearch,\n    inputValue,\n    getOptionLabel,\n    getOptionDescription,\n  }: FilterOptionsParams<ItemT>\n) {\n  if (isFocusedAndValueIsSameAsSearch) {\n    return a;\n  }\n  return a?.filter((o) => {\n    const oAny = o as any;\n    if (!inputValue) {\n      return true;\n    }\n    const search = inputValue.toLowerCase();\n    const label = getOptionLabel(oAny) || '';\n    const description = getOptionDescription?.(oAny) || '';\n    return (\n      label.toLowerCase().includes(search) ||\n      description.toLowerCase().includes(search)\n    );\n  });\n}\n\nfunction removeSelected<ItemT>(\n  a: ReadonlyArray<ItemT> | null | undefined,\n  {\n    value: rValue,\n    multiple,\n    getOptionValue,\n  }: {\n    value: ItemT | ItemT[] | null | undefined;\n    multiple: boolean | undefined;\n    getOptionValue: (option: ItemT) => string | number;\n  }\n) {\n  return a?.filter((o) => {\n    let selected = multiple\n      ? (rValue as ItemT[])?.some(\n          (v) => getOptionValue(v) === getOptionValue(o)\n        )\n      : rValue && getOptionValue(rValue as ItemT) === getOptionValue(o);\n\n    return !selected;\n  });\n}\n\nexport default function Autocomplete<ItemT>(\n  props: AutocompleteMultipleProps<ItemT> | AutocompleteSingleProps<ItemT>\n) {\n  // const window = useWindowDimensions();\n  const theme = useTheme();\n  const { scrollableRef, scrollX, scrollY } = useAutocomplete();\n  const {\n    testID,\n    loading,\n    ListComponent,\n    inputProps: { onChangeText, defaultValue, ...inputProps } = {},\n    listProps,\n    groupBy,\n    multiple,\n    options,\n    style,\n    value,\n    getOptionValue = (option: ItemT) =>\n      (option as any).id || (option as any).key || (option as any).value,\n    getOptionLabel = (option: ItemT) =>\n      (option as any).label || (option as any).name || (option as any).title,\n    getOptionDescription = (option: ItemT) => (option as any).description,\n    getOptionIcon = (option: ItemT) => (option as any).icon,\n    filterOptions = (a, b) => defaultFilterOptions<ItemT>(a, b),\n  } = props;\n  const { value: values, onChange: onChangeMultiple } =\n    props as AutocompleteMultipleProps<ItemT>;\n  const { value: singleValue, onChange: onChangeSingle } =\n    props as AutocompleteSingleProps<ItemT>;\n\n  const inputContainerDimensions = useComponentDimensions();\n  const chipsDimensions = useComponentDimensions();\n\n  const chipContainerRef = useAnimatedRef<Animated.View>();\n  const inputContainerRef = useAnimatedRef<Animated.View>();\n  const inputRef = React.useRef<NativeTextInput>(null);\n  const [inputValue, setInputValue] = React.useState(defaultValue || '');\n  const [visible, setVisible] = React.useState(false);\n  const [focused, setFocused] = React.useState(false);\n\n  const getOptionLabelRef = useLatest(getOptionLabel);\n  React.useEffect(() => {\n    if (!multiple) {\n      if (singleValue) {\n        setInputValue(getOptionLabelRef.current(singleValue));\n      } else {\n        setInputValue('');\n      }\n    }\n  }, [getOptionLabelRef, multiple, singleValue]);\n\n  const changeText = (v: string) => {\n    // setVisible(true);\n    setInputValue(v);\n    onChangeText?.(v);\n  };\n  const blur = (_: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    // console.log('blur', e);\n    // setVisible(false);\n    setFocused(false);\n  };\n  const focus = (_: NativeSyntheticEvent<TextInputFocusEventData>) => {\n    setVisible(true);\n    setFocused(true);\n  };\n\n  const filterOptionsRef = useLatest(filterOptions);\n  const groupByRef = useLatest(groupBy);\n  const getOptionValueRef = useLatest(getOptionValue);\n  const getOptionDescriptionRef = useLatest(getOptionDescription);\n\n  const isFocusedAndValueIsSameAsSearch =\n    (singleValue && focused && inputValue === getOptionLabel(singleValue)) ||\n    false;\n\n  // console.log({\n  //   singleValue,\n  //   focused,\n  //   inputValue,\n  //   inputValueCompareTo: singleValue && getOptionLabel(singleValue),\n  //   isFocusedAndValueIsSameAsSearch,\n  // });\n\n  const data = React.useMemo(\n    () =>\n      filterOptionsRef.current(\n        removeSelected(options, {\n          value,\n          multiple,\n          getOptionValue: getOptionValueRef.current,\n        }),\n        {\n          isFocusedAndValueIsSameAsSearch,\n          getOptionLabel: getOptionLabelRef.current,\n          getOptionDescription: getOptionDescriptionRef.current,\n          inputValue,\n        }\n      ),\n    [\n      isFocusedAndValueIsSameAsSearch,\n      filterOptionsRef,\n      inputValue,\n      value,\n      multiple,\n      options,\n      getOptionValueRef,\n      getOptionLabelRef,\n      getOptionDescriptionRef,\n    ]\n  );\n\n  const { highlightedIndex, handleKeyPress } = useHighlighted({\n    inputValue,\n    setInputValue,\n    data,\n    multiple,\n    values,\n    onChangeMultiple,\n    onChangeSingle,\n    inputRef,\n    setVisible,\n  });\n\n  const sections = React.useMemo(() => {\n    if (!groupByRef || !groupByRef.current) {\n      return [];\n    }\n    let grouped: { [key: string]: ItemT[] } = {};\n    data?.forEach((o) => {\n      const key = groupByRef.current!(o);\n      const current = grouped[key];\n      if (current) {\n        current.push(o);\n      } else {\n        grouped[key] = [o];\n      }\n    });\n\n    return Object.keys(grouped).map((k) => ({\n      title: k,\n      data: grouped[k],\n    }));\n  }, [data, groupByRef]);\n\n  const press = React.useCallback(\n    (o: ItemT) => {\n      if (multiple) {\n        inputRef.current?.focus();\n        onChangeMultiple([...(values || []), o]);\n        setInputValue('');\n      } else {\n        onChangeSingle(o);\n        setVisible(false);\n      }\n    },\n    [multiple, setInputValue, onChangeMultiple, onChangeSingle, values]\n  );\n\n  const remove = React.useCallback(\n    (o: ItemT) => {\n      if (multiple) {\n        const excludeCurrent = (values || []).filter(\n          (vo) => getOptionValueRef.current(vo) !== getOptionValueRef.current(o)\n        );\n        onChangeMultiple(excludeCurrent);\n      }\n    },\n    [getOptionValueRef, multiple, onChangeMultiple, values]\n  );\n\n  const automaticScrollProps = useAutomaticScroller({\n    highlightedIndex,\n    sections,\n    groupBy,\n  });\n\n  const minimalDropdownWidth = 250;\n  const dropdownWidth = inputContainerDimensions.width;\n  const remainingSpace = useDerivedValue(\n    () => inputContainerDimensions.width.value - chipsDimensions.width.value,\n    [inputContainerDimensions.width, chipsDimensions.width]\n  );\n\n  const shouldEnter = useDerivedValue(\n    () =>\n      chipsDimensions.height.value > 45 ||\n      remainingSpace.value < minimalDropdownWidth,\n    [chipsDimensions.height, remainingSpace]\n  );\n  const hasMultipleValue = multiple && (values || []).length > 0;\n\n  // const animatedInputStyle = useAnimatedStyle(() => {\n  //   return {\n  //     height: hasMultipleValue\n  //       ? shouldEnter\n  //         ? chipsDimensions.height.value + 36 + 46\n  //         : chipsDimensions.height.value + 36\n  //       : undefined,\n  //   };\n  // }, [chipsDimensions.height, hasMultipleValue, shouldEnter]);\n  const highlightedColor = React.useMemo(\n    () =>\n      theme.dark\n        ? Color(theme.colors.onBackground).alpha(0.2).rgb().string()\n        : Color(theme.colors.onBackground).alpha(0.1).rgb().string(),\n    [theme.dark, theme.colors.onBackground]\n  );\n\n  const innerListProps = {\n    testID: `${testID}-autocomplete-list`,\n    keyboardDismissMode: 'on-drag',\n    keyboardShouldPersistTaps: 'handled',\n    contentInsetAdjustmentBehavior: 'always',\n    renderItem: ({\n      item,\n      index,\n      section,\n    }: {\n      item: ItemT;\n      index: number;\n      section?: any;\n    }) => {\n      const key = getOptionValue(item);\n      let realIndex = index;\n      if (section) {\n        // what the hell...\n        const sectionIndex = sections.indexOf(section);\n        const indexesBefore = sections\n          .filter((_, i) => i < sectionIndex)\n          .reduce((a, b) => a + b.data.length, 0);\n        realIndex = indexesBefore + index;\n      }\n      return (\n        <AutocompleteItem<ItemT>\n          testID={`${testID}-autocomplete-item-${key}`}\n          key={key}\n          highlightedColor={highlightedColor}\n          title={getOptionLabel(item)}\n          description={getOptionDescription(item)}\n          icon={getOptionIcon(item)}\n          selected={highlightedIndex === realIndex}\n          onPress={press}\n          option={item}\n        />\n      );\n    },\n    keyExtractor: (item: ItemT) => getOptionValue(item),\n    extraData: { highlightedIndex },\n    ...automaticScrollProps,\n  };\n\n  const SectionListComponent = ListComponent ? ListComponent : SectionList;\n  const FinalListComponent = ListComponent ? ListComponent : FlatList;\n\n  const inputStyle = (inputProps as any)?.style;\n  const backgroundColor = React.useMemo(() => {\n    if (inputStyle) {\n      const flattenStyle = StyleSheet.flatten(inputStyle);\n      if (flattenStyle.backgroundColor) {\n        return flattenStyle.backgroundColor;\n      }\n    }\n    return theme.colors.background;\n  }, [theme, inputStyle]);\n  const onPressOutside = React.useCallback(() => {\n    setVisible(false);\n  }, [setVisible]);\n\n  // console.log({\n  //   visible,\n  //   inputDim: inputContainerDimensions.dimensions,\n  //   chipsDimensions,\n  //   shouldEnter,\n  // });\n\n  const textInputIcon = singleValue ? getOptionIcon(singleValue) : undefined;\n  return (\n    <View style={[styles.menu, style]} accessibilityRole=\"menu\" testID={testID}>\n      <Animated.View\n        ref={inputContainerRef}\n        onLayout={inputContainerDimensions.onLayout}\n        style={styles.inputContainer}\n      >\n        <TextInput\n          ref={inputRef}\n          onBlur={blur}\n          onFocus={focus}\n          blurOnSubmit={false}\n          value={hasMultipleValue || inputValue.length > 0 ? ' ' : ''}\n          left={\n            textInputIcon && !props.disableInputPrefixIcon ? (\n              <TextInput.Icon icon={textInputIcon} />\n            ) : undefined\n          }\n          {...inputProps}\n          style={[inputProps.style, styles.full]}\n          // @ts-ignore web only props\n          accessibilityHasPopup={true}\n          render={(params) => {\n            return (\n              <NativeTextInputWithAnimatedStyles\n                {...params}\n                selectTextOnFocus={true}\n                value={inputValue}\n                onChangeText={changeText}\n                onKeyPress={handleKeyPress}\n                shouldEnter={shouldEnter}\n                chipsHeight={chipsDimensions.height}\n                chipsWidth={chipsDimensions.width}\n                multiple={multiple}\n              />\n            );\n          }}\n        />\n        {(multiple && visible) || (!multiple && value) ? (\n          <IconButton\n            testID=\"autocomplete-close\"\n            size={20}\n            icon=\"close\"\n            style={styles.closeButton}\n            onPress={() => {\n              setVisible(false);\n              setInputValue('');\n              if (multiple) {\n                onChangeMultiple([]);\n              } else {\n                onChangeSingle(undefined);\n              }\n            }}\n          />\n        ) : null}\n        <IconButton\n          testID={`${testID}-autocomplete-arrow`}\n          style={styles.arrowIconButton}\n          icon={visible ? 'menu-up' : 'menu-down'}\n          onPress={() => {\n            if (visible) {\n              inputRef.current?.blur();\n              setVisible(false);\n            } else {\n              inputRef.current?.focus();\n              setVisible(true);\n            }\n          }}\n        />\n      </Animated.View>\n      {multiple && (\n        <Animated.View\n          ref={chipContainerRef}\n          testID={`${testID}-autocomplete-chips`}\n          style={[styles.chipsWrapper, { backgroundColor }]}\n          onLayout={chipsDimensions.onLayout}\n          pointerEvents=\"box-none\"\n        >\n          {values?.map((o) => (\n            <Chip\n              key={getOptionValue(o)}\n              onClose={() => remove(o)}\n              style={styles.chip}\n              icon={getOptionIcon(o)}\n            >\n              {getOptionLabel(o)}\n            </Chip>\n          ))}\n        </Animated.View>\n      )}\n      {loading ? <ActivityIndicator style={styles.loading} /> : null}\n      {visible ? (\n        <PortalContent visible={visible} onPressOutside={onPressOutside}>\n          <PositionedSurface\n            scrollableRef={scrollableRef}\n            theme={theme}\n            dropdownWidth={dropdownWidth}\n            inputContainerRef={inputContainerRef}\n            inputContainerHeight={inputContainerDimensions.height}\n            scrollX={scrollX}\n            scrollY={scrollY}\n          >\n            {groupBy ? (\n              <SectionListComponent<ItemT>\n                {...listProps}\n                {...innerListProps}\n                sections={sections}\n                renderSectionHeader={({ section: { title } }: any) => (\n                  <List.Subheader>{title}</List.Subheader>\n                )}\n                onScrollToIndexFailed={(info: any) => {\n                  // TODO: make sure everything uses fixed heights so this error won't be there\n                  // e.g.:  getItemLayout={getSectionListItemLayout}\n                  console.error(info);\n                }}\n              />\n            ) : (\n              <FinalListComponent<ItemT>\n                {...listProps}\n                {...innerListProps}\n                getItemLayout={getFlatListItemLayout}\n                data={data}\n              />\n            )}\n          </PositionedSurface>\n        </PortalContent>\n      ) : null}\n    </View>\n  );\n}\n\nconst AnimatedNativeInput = Animated.createAnimatedComponent(NativeTextInput);\nconst NativeTextInputWithAnimatedStyles = React.forwardRef(\n  (\n    {\n      shouldEnter,\n      chipsHeight,\n      chipsWidth,\n      style,\n      multiple,\n      ...rest\n    }: TextInputProps & {\n      multiple: boolean | undefined;\n      shouldEnter: DerivedValue<boolean>;\n      chipsHeight: SharedValue<number>;\n      chipsWidth: SharedValue<number>;\n    },\n    forwardedRef: any\n  ) => {\n    const originalStyle = StyleSheet.flatten(style);\n\n    const orgTop = Number(originalStyle.paddingTop) || 0;\n    const orgLeft = Number(originalStyle.paddingLeft) || 0;\n    const height = Number(originalStyle.height) || 0;\n    const animatedStyle = useAnimatedStyle(() => {\n      if (!multiple) {\n        return {};\n      }\n      const addTop = shouldEnter.value ? chipsHeight.value + 18 : 18;\n\n      return {\n        paddingTop: orgTop + addTop,\n        paddingLeft: orgLeft + (shouldEnter.value ? 0 : chipsWidth.value),\n        height: height + addTop,\n      };\n    }, [multiple, orgLeft, orgTop, shouldEnter, chipsHeight, chipsWidth]);\n\n    return (\n      <AnimatedNativeInput\n        ref={forwardedRef}\n        {...rest}\n        style={[style, animatedStyle]}\n      />\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  modalBackground: {\n    flex: 1,\n  },\n  menu: {\n    position: 'relative',\n  },\n  chipsWrapper: {\n    flexDirection: 'row',\n    position: 'absolute',\n    flexWrap: 'wrap',\n    top: 32,\n    left: 12,\n  },\n  chip: { marginRight: 6, marginBottom: 6, flexShrink: 1 },\n\n  inputContainer: { alignItems: 'center', flexDirection: 'row' },\n  full: { flex: 1 },\n  closeButton: {\n    position: 'absolute',\n    bottom: 6,\n    right: 36,\n  },\n  arrowIconButton: {\n    position: 'absolute',\n    bottom: 5,\n    right: 0,\n  },\n  loading: { position: 'absolute', right: 12, top: 24 },\n});\n"]}