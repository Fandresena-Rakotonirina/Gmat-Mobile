"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usePosition;

var React = _interopRequireWildcard(require("react"));

var _reactNativeReanimated = require("react-native-reanimated");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function usePosition({
  inputContainerRef,
  scrollX,
  scrollY
}) {
  const [initial] = React.useState(getXYFromRef(inputContainerRef, {
    scrollX,
    scrollY
  }));
  const x = (0, _reactNativeReanimated.useSharedValue)(initial.x);
  const y = (0, _reactNativeReanimated.useSharedValue)(initial.y);
  (0, React.useLayoutEffect)(() => {
    const coordinates = getXYFromRef(inputContainerRef, {
      scrollX,
      scrollY
    });
    x.value = coordinates.x;
    y.value = coordinates.y;
  });
  return (0, _reactNativeReanimated.useDerivedValue)(() => {
    return {
      x: x.value,
      y: y.value
    };
  }, [x, y]);
}

function getXYFromRef(ref, {
  scrollX,
  scrollY
}) {
  var _window, _window2;

  const {
    x,
    y
  } = getBoundingClientRect(ref.current);
  return {
    x: x + scrollX.value + (((_window = window) === null || _window === void 0 ? void 0 : _window.scrollX) || 0),
    y: y + scrollY.value + (((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.scrollY) || 0)
  };
}

function getBoundingClientRect(node) {
  if (node) {
    const isElement = node.nodeType === 1;
    /* Node.ELEMENT_NODE */

    if (isElement && typeof node.getBoundingClientRect === 'function') {
      return node.getBoundingClientRect();
    }
  }

  return {
    x: 0,
    y: 0
  };
}
//# sourceMappingURL=usePosition.js.map