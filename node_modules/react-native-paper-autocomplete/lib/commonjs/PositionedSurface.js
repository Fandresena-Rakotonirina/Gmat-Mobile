"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PositionedSurface;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _usePosition = _interopRequireDefault(require("./usePosition"));

var _AnimatedSurface = _interopRequireDefault(require("./AnimatedSurface"));

var _useKeyboardHeight = _interopRequireDefault(require("./useKeyboardHeight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const SCROLLING_PADDING = 120;

function PositionedSurface({
  scrollableRef,
  inputContainerRef,
  children,
  theme,
  dropdownWidth,
  inputContainerHeight,
  scrollX,
  scrollY
}) {
  const dimensions = (0, _reactNative.useWindowDimensions)();
  const keyboardHeight = (0, _useKeyboardHeight.default)(dimensions);
  const position = (0, _usePosition.default)({
    inputContainerRef,
    scrollX,
    scrollY
  });
  const translateX = (0, _reactNativeReanimated.useDerivedValue)(() => position.value.x - scrollX.value, [position, scrollX]);
  const translateY = (0, _reactNativeReanimated.useDerivedValue)(() => position.value.y + inputContainerHeight.value - scrollY.value, [position, inputContainerHeight, scrollY]);
  const isWeb = _reactNative.Platform.OS === 'web';
  React.useLayoutEffect(() => {
    if (isWeb) {
      return;
    }

    const timerId = setTimeout(() => {
      var _scrollable$scrollTo;

      const scrollable = scrollableRef.current;

      if (!(scrollable !== null && scrollable !== void 0 && scrollable.scrollTo)) {
        console.debug('[react-native-paper-autocomplete] no scrollView to scroll in');
      }

      scrollable === null || scrollable === void 0 ? void 0 : (_scrollable$scrollTo = scrollable.scrollTo) === null || _scrollable$scrollTo === void 0 ? void 0 : _scrollable$scrollTo.call(scrollable, {
        x: position.value.x,
        // - TODO: inputContainer.width?
        y: position.value.y - SCROLLING_PADDING,
        animated: true
      });
    }, 100);
    return () => clearTimeout(timerId);
  }, [position.value, isWeb, scrollableRef]);
  const animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    if (isWeb) {
      return {
        transform: [{
          translateY: translateY.value
        }, {
          translateX: translateX.value
        }]
      };
    }

    return {
      // transform is buggy at least on iOS at inital re-render
      top: translateY.value,
      left: translateX.value
    };
  }, [dropdownWidth, translateX, translateY]);
  const animatedSurfaceStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    return {
      maxHeight: dimensions.height - keyboardHeight.value - SCROLLING_PADDING * 2
    };
  }, [dimensions.height - keyboardHeight.value]);
  return /*#__PURE__*/React.createElement(_reactNativeReanimated.default.View, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.surface, animatedStyle],
    pointerEvents: "box-none"
  }, /*#__PURE__*/React.createElement(_AnimatedSurface.default // entering={FadeInDown}
  , {
    elevation: 5,
    style: [animatedSurfaceStyle, {
      width: dropdownWidth.value,
      borderRadius: theme.roundness
    }]
  }, children));
}

const styles = _reactNative.StyleSheet.create({
  surface: {
    zIndex: 100
  }
});
//# sourceMappingURL=PositionedSurface.js.map